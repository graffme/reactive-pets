{"version":3,"sources":["paw.svg","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PetForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","target","value","name","setState","defineProperty","handleSubmit","preventDefault","onUpdate","state","animalType","animalNumber","react_default","a","createElement","onChange","className","type","min","max","isPending","onClick","disabled","Component","getByProxy","link","config","arguments","length","undefined","axios","get","concat","PetGallery","_ref","listItems","animalPhotos","map","animalPhoto","key","src","alt","App","val","getData","getRandomAnimalType","animals","Math","floor","random","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","sent","data","stop","paw","Form_Form","App_PetGallery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kTCgEzBC,qBA5Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,kBAAoB,SAACC,GACnB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KAEpBX,EAAKY,SAALX,OAAAY,EAAA,EAAAZ,CAAA,GACGU,EAAOD,KAdOV,EAkBnBc,aAAe,SAACN,GACdA,EAAMO,iBACNf,EAAKD,MAAMiB,SAAShB,EAAKiB,QAlBzBjB,EAAKiB,MAAQ,CACXC,WAAY,SACZC,aAAc,GAJCnB,wEAwBjB,OACEoB,EAAAC,EAAAC,cAAA,2BAEEF,EAAAC,EAAAC,cAAA,UACEX,KAAK,aACLD,MAAOP,KAAKc,MAAMC,WAClBK,SAAUpB,KAAKI,kBACfiB,UAAU,4BAEVJ,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,UAAd,UACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,QAAd,QACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,SAAd,SACAU,EAAAC,EAAAC,cAAA,UAAQZ,MAAM,UAAd,WAXJ,kBAeEU,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLd,KAAK,eACLD,MAAOP,KAAKc,MAAME,aAClBI,SAAUpB,KAAKI,kBACfiB,UAAU,2BACVE,IAAI,IAAIC,IAAI,OAEdP,EAAAC,EAAAC,cAAA,SACEG,KAAK,SACLf,MAAOP,KAAKJ,MAAM6B,UAAY,UAAY,SAC1CC,QAAS1B,KAAKW,aACdU,UAAU,2BACVM,SAAU3B,KAAKJ,MAAM6B,oBAtDTG,+BCGhBC,SAAa,SAACC,GAAsB,IAAhBC,EAAgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACjC,OAAOG,IAAMC,IAAN,oBAAAC,OAA8BP,GAAQC,KAGzCO,EAAa,SAAAC,GAAsB,IACjCC,EADiCD,EAAnBE,aACWC,IAAI,SAACC,GAAD,OACjC1B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKD,EAAatB,UAAU,iBAC/BJ,EAAAC,EAAAC,cAAA,OAAK0B,IAAKF,EAAaG,IAAI,cAI/B,OACE7B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACZmB,IA0EQO,cApEb,SAAAA,EAAYnD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACjBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KAQRiB,SAAW,SAACmC,GACVnD,EAAKY,SAAS,CACZM,WAAYiC,EAAIjC,WAChBC,aAAcgC,EAAIhC,aAClBS,WAAW,GACV,WACD5B,EAAKoD,aAfUpD,EAmBnBqD,oBAAsB,WACpB,IAAMC,EAAU,CAAC,SAAU,OAAQ,SACnC,OAAOA,EAAQC,KAAKC,MAAMD,KAAKE,SAASH,EAAQlB,UArB/BpC,EAwBnBoD,QAxBmBnD,OAAAyD,EAAA,EAAAzD,CAAA0D,EAAAtC,EAAAuC,KAwBT,SAAAC,IAAA,IAAA3C,EAAAe,EAAA6B,EAAA,OAAAH,EAAAtC,EAAA0C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACFhD,EAAuC,WAA1BlB,EAAKiB,MAAMC,WAC1BlB,EAAKqD,sBACLrD,EAAKiB,MAAMC,WACTe,EAJE,2BAAAO,OAIgCtB,EAJhC,WAAAsB,OAIoDxC,EAAKiB,MAAME,aAJ/D,8BAAA6C,EAAAE,KAAA,EAMelC,EAAWC,GAN1B,OAMF6B,EANEE,EAAAG,KAQRnE,EAAKY,SAAS,CACZgC,aAAckB,EAASM,KACvBxC,WAAW,IAVL,wBAAAoC,EAAAK,SAAAR,EAAA1D,SAtBRH,EAAKiB,MAAQ,CACXC,WAAY,SACZC,aAAc,EACdyB,aAAc,IALC5C,wEAuCjB,OACEoB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAEbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAK0B,IAAKsB,IAAK9C,UAAU,UAAUyB,IAAI,SACvC7B,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,8FAMJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACfJ,EAAAC,EAAAC,cAACiD,EAAD,CAASvD,SAAUb,KAAKa,SAAUY,UAAWzB,KAAKc,MAAMW,eAK5DR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACkD,EAAD,CAAY5B,aAAczC,KAAKc,MAAM2B,wBA9D7Bb,aCdE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f4c06ae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/paw.0c97cf3e.svg\";","import React, { Component } from 'react';\nimport './Form.scss';\n\nclass PetForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animalType: 'shibes',\n      animalNumber: 1,\n    };\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.onUpdate(this.state);\n  }\n\n  render() {\n    return (\n      <form>\n        Animal type:\n        <select\n          name=\"animalType\"\n          value={this.state.animalType}\n          onChange={this.handleInputChange}\n          className=\"form-control form-select\">\n\n          <option value=\"shibes\">Shibes</option>\n          <option value=\"cats\">Cats</option>\n          <option value=\"birds\">Birds</option>\n          <option value=\"random\">Random</option>\n        </select>\n\n        Animals number:\n        <input\n          type=\"number\"\n          name=\"animalNumber\"\n          value={this.state.animalNumber}\n          onChange={this.handleInputChange}\n          className=\"form-control form-number\"\n          min=\"1\" max=\"10\" />\n\n        <input\n          type=\"submit\"\n          value={this.props.isPending ? \"Loading\" : \"Search\"}\n          onClick={this.handleSubmit}\n          className=\"form-control form-submit\"\n          disabled={this.props.isPending}\n        />\n      </form>\n    );\n  }\n}\n\nexport default PetForm;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport PetForm from './components/Form/Form';\nimport paw from './paw.svg';\nimport './App.scss';\n\nconst getByProxy = (link, config = {}) => {\n  return axios.get(`https://cors.io/?${link}`, config)\n}\n\nconst PetGallery = ({ animalPhotos }) => {\n  const listItems = animalPhotos.map((animalPhoto) => (\n    <div key={animalPhoto} className=\"col-4 petTile\">\n      <img src={animalPhoto} alt=\"Animal\"/>\n    </div>\n  ));\n\n  return (\n    <div className=\"row petGallery\">\n      {listItems}\n    </div>\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animalType: 'shibes',\n      animalNumber: 0,\n      animalPhotos: [],\n    };\n  }\n\n  onUpdate = (val) => {\n    this.setState({\n      animalType: val.animalType,\n      animalNumber: val.animalNumber,\n      isPending: true,\n    }, () => {\n      this.getData();\n    });\n  };\n\n  getRandomAnimalType = () => {\n    const animals = ['shibes', 'cats', 'birds'];\n    return animals[Math.floor(Math.random()*animals.length)];\n  }\n\n  getData = async () => {\n    const animalType = this.state.animalType === 'random'\n      ? this.getRandomAnimalType()\n      : this.state.animalType;\n    const link = `http://shibe.online/api/${animalType}?count=${this.state.animalNumber}&urls=true&httpsUrls=false`;\n\n    const response = await getByProxy(link)\n\n    this.setState({\n      animalPhotos: response.data,\n      isPending: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <img src={paw} className=\"App-paw\" alt=\"logo\" />\n              <h1>REACTive Pets</h1>\n              <p>\n                Choose animal type and number of photos you want to display, then click Search!\n              </p>\n            </div>\n          </div>\n\n          <div className=\"row\">\n            <div className=\"col-12\">\n            <PetForm onUpdate={this.onUpdate} isPending={this.state.isPending}/>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container\">\n          <PetGallery animalPhotos={this.state.animalPhotos} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}